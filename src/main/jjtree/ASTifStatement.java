/* Generated By:JJTree: Do not edit this line. ASTifStatement.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package main.jjtree;

import main.Exceptions.SemanitcException;
import main.SemanticHelper;

public
class ASTifStatement extends SimpleNode {
  public ASTifStatement(int id) {
    super(id);
  }

  public ASTifStatement(MyGrammar p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(MyGrammarVisitor visitor, Object data) {

    // first child is the expression
    Object expressionValue = this.jjtGetChild(0).jjtAccept(visitor,data);
    // check if the expression is of a boolean value
    int expressionValueType = SemanticHelper.getType(expressionValue);
    if (SemanticHelper.getType(expressionValue) !=  3)
    {
      String expressionType = SemanticHelper.getStringFromIntType(expressionValueType);
      throw new SemanitcException(this.jjtGetFirstToken(),
              "Expected Boolean value but got: " +expressionType);
    }
    Boolean expressionValueBool = (Boolean) expressionValue;
    Object res = null;
    if (expressionValueBool)
      // if true execute the second child which is the Block
      res = this.jjtGetChild(1).jjtAccept(visitor,data);
    else if (this.children.length > 2)
      // if the statement has an Else part
      res = this.jjtGetChild(2).jjtAccept(visitor,data);
    return res;

    // return visitor.visit(this, data);
  }
}
/* JavaCC - OriginalChecksum=04415a94c473f6cb877a0d96e1d59750 (do not edit this line) */
