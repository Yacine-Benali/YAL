/* Generated By:JJTree&JavaCC: Do not edit this line. MyGrammarConstants.java */
package main.jjtree;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MINLETTER = 7;
  /** RegularExpression Id. */
  int CAPLETTER = 8;
  /** RegularExpression Id. */
  int DIGIT = 9;
  /** RegularExpression Id. */
  int INT = 10;
  /** RegularExpression Id. */
  int REAL = 11;
  /** RegularExpression Id. */
  int BOOL = 12;
  /** RegularExpression Id. */
  int INT_KEYWORD = 13;
  /** RegularExpression Id. */
  int REAL_KEYWORD = 14;
  /** RegularExpression Id. */
  int STRING_KEYWORD = 15;
  /** RegularExpression Id. */
  int BOOL_KEYWORD = 16;
  /** RegularExpression Id. */
  int PROGRAM = 17;
  /** RegularExpression Id. */
  int FUNCTION = 18;
  /** RegularExpression Id. */
  int PROCEDURE = 19;
  /** RegularExpression Id. */
  int VAR = 20;
  /** RegularExpression Id. */
  int BEGIN = 21;
  /** RegularExpression Id. */
  int END = 22;
  /** RegularExpression Id. */
  int WHILE = 23;
  /** RegularExpression Id. */
  int BREAK = 24;
  /** RegularExpression Id. */
  int DO = 25;
  /** RegularExpression Id. */
  int IF = 26;
  /** RegularExpression Id. */
  int THEN = 27;
  /** RegularExpression Id. */
  int ELSE = 28;
  /** RegularExpression Id. */
  int RESULT = 29;
  /** RegularExpression Id. */
  int PRINT = 30;
  /** RegularExpression Id. */
  int NOT = 31;
  /** RegularExpression Id. */
  int OR = 32;
  /** RegularExpression Id. */
  int AND = 33;
  /** RegularExpression Id. */
  int PLUS = 34;
  /** RegularExpression Id. */
  int MINUS = 35;
  /** RegularExpression Id. */
  int MULTIPLY = 36;
  /** RegularExpression Id. */
  int DIVIDE = 37;
  /** RegularExpression Id. */
  int LESS = 38;
  /** RegularExpression Id. */
  int GREATER = 39;
  /** RegularExpression Id. */
  int LESSEQUAL = 40;
  /** RegularExpression Id. */
  int GREATEREQUAL = 41;
  /** RegularExpression Id. */
  int EQUAL = 42;
  /** RegularExpression Id. */
  int NOTEQUAL = 43;
  /** RegularExpression Id. */
  int ASSIGN = 44;
  /** RegularExpression Id. */
  int LPAREN = 45;
  /** RegularExpression Id. */
  int RPAREN = 46;
  /** RegularExpression Id. */
  int COMMA = 47;
  /** RegularExpression Id. */
  int COLON = 48;
  /** RegularExpression Id. */
  int SEMICOLON = 49;
  /** RegularExpression Id. */
  int IDENTIFIER = 50;
  /** RegularExpression Id. */
  int STRING = 51;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\\' \\\'\"",
    "\"\\\'\\\'\"",
    "<MINLETTER>",
    "<CAPLETTER>",
    "<DIGIT>",
    "<INT>",
    "<REAL>",
    "<BOOL>",
    "\"int\"",
    "\"real\"",
    "\"string\"",
    "\"bool\"",
    "\"program\"",
    "\"function\"",
    "\"procedure\"",
    "\"var\"",
    "\"begin\"",
    "\"end\"",
    "\"while\"",
    "\"break\"",
    "\"do\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"Result\"",
    "\"print\"",
    "\"!\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\":=\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\":\"",
    "\";\"",
    "<IDENTIFIER>",
    "<STRING>",
  };

}
