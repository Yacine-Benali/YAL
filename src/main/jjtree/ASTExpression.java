/* Generated By:JJTree: Do not edit this line. ASTExpression.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package main.jjtree;

import main.Exceptions.TypeError;
import main.SemanticException;
import main.SemanticHelper;

import java.util.Objects;

public
class ASTExpression extends SimpleNode {

    public String operator = null;
    public boolean isUnary = false;

    public ASTExpression(int id) {
        super(id);
    }

    public ASTExpression(MyGrammar p, int id) {
        super(p, id);
    }


    /**
     * Accept the visitor.
     **/
    public Object jjtAccept(MyGrammarVisitor visitor, Object data) {
        Object result = execute(visitor, data);
        return result;
    }


    public Object UnaryExpression(MyGrammarVisitor visitor, Object data) {

        Object res = this.jjtGetChild(0).jjtAccept(visitor, data);
        if (operator == null) {
            // either function call
            // eithe variableid
            // either literalExpression

            return res;
        }
        int type1 = SemanticHelper.getType(res);
        if (operator.equals("!")) {
            res = SemanticHelper.getSolve(res);
            res = !((Boolean) res);
        }
        return res;
    }

    private void throwTypeError(int type1, int type2) {
        String type1String = SemanticHelper.getStringFromIntType(type1);
        String type2String = SemanticHelper.getStringFromIntType(type2);
        String error = String.format("Unsupported operation %s between types '%s' and '%s'", operator, type1String, type2String);
        throw new TypeError(error);
    }

    public Object execute(MyGrammarVisitor visitor, Object data) {
        if (isUnary || children.length == 1) {
            return UnaryExpression(visitor, data);
        }
        Object d1 = this.jjtGetChild(0).jjtAccept(visitor, data);
        Object d2 = this.jjtGetChild(1).jjtAccept(visitor, data);

        int type1 = SemanticHelper.getType(d1);
        int type2 = SemanticHelper.getType(d2);


        switch (operator) {
            case "+":
                // System.out.println("going for the Addition");

                Object res = null;
                if (type1 == 0) {
                    if (type2 == 0) res = (Integer) d1 + (Integer) d2;
                    if (type2 == 1) res = (Integer) d1 + (Double) d2;
                    if (type2 == 2) res = String.valueOf((Integer) d1) + (String) d2;
                    if (type2 == 3)
                        throwTypeError(type1, type2);

                }
                if (type1 == 1) {
                    if (type2 == 0) res = (Double) d1 + (Integer) d2;
                    if (type2 == 1) res = (Double) d1 + (Double) d2;
                    if (type2 == 2) res = String.valueOf((Double) d1) + (String) d2;
                    if (type2 == 3)
                        throwTypeError(type1, type2);

                }
                if (type1 == 2) {
                    if (type2 == 0) res = (String) d1 + String.valueOf((Integer) d2);
                    if (type2 == 1) res = (String) d1 + String.valueOf((Double) d2);
                    if (type2 == 2) res = (String) d1 + (String) d2;
                    if (type2 == 3) res = (String) d1 + String.valueOf((Boolean) d2);
                }
                if (type1 == 3) {
                    if (type2 == 0) throwTypeError(type1, type2);
                    if (type2 == 1) throwTypeError(type1, type2);
                    if (type2 == 2) res = String.valueOf((Boolean) d1) + (String) d2;
                    if (type2 == 3)
                        throwTypeError(type1, type2);
                }
                return res;
            case "-":
                res = null;
                if (type1 == 0) {
                    if (type2 == 0) res = (Integer) d1 - (Integer) d2;
                    if (type2 == 1) res = (Integer) d1 - (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 1) {
                    if (type2 == 0) res = (Double) d1 - (Integer) d2;
                    if (type2 == 1) res = (Double) d1 - (Double) d2;
                    if (type2 == 3)
                        throwTypeError(type1, type2);
                }
                if (type1 == 3) {
                    if (type2 == 0) throwTypeError(type1, type2);
                    if (type2 == 1)
                        throwTypeError(type1, type2);
                    if (type2 == 3)
                        throwTypeError(type1, type2);
                }
                return res;

            case "*":
                res = null;
                if (type1 == 0) {
                    if (type2 == 0) res = (Integer) d1 * (Integer) d2;
                    if (type2 == 1) res = (Integer) d1 * (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 1) {
                    if (type2 == 0) res = (Double) d1 * (Integer) d2;
                    if (type2 == 1) res = (Double) d1 * (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 3) {
                    if (type2 == 0) throwTypeError(type1, type2);
                    if (type2 == 1) throwTypeError(type1, type2);
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                return res;

            case "/":
                res = null;
                if (type1 == 0) {
                    if (type2 == 0) res = (Integer) d1 / (Integer) d2;
                    if (type2 == 1) res = (Integer) d1 / (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 1) {
                    if (type2 == 0) res = (Double) d1 / (Integer) d2;
                    if (type2 == 1) res = (Double) d1 / (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 3) {
                    if (type2 == 0) throwTypeError(type1, type2);
                    if (type2 == 1) throwTypeError(type1, type2);
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                return res;


            case "<":
                res = null;
                if (type1 == 0) {
                    if (type2 == 0) res = (Integer) d1 < (Integer) d2;
                    if (type2 == 1) res = (Integer) d1 < (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 1) {
                    if (type2 == 0) res = (Double) d1 < (Integer) d2;
                    if (type2 == 1) res = (Double) d1 < (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 2) {
                    if (type2 == 2) throwTypeError(type1, type2);
                }
                if (type1 == 3) {
                    if (type2 == 0) throwTypeError(type1, type2);
                    if (type2 == 1) throwTypeError(type1, type2);
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                return res;

            case ">":
                res = null;
                if (type1 == 0) {
                    if (type2 == 0) res = (Integer) d1 > (Integer) d2;
                    if (type2 == 1) res = (Integer) d1 > (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 1) {
                    if (type2 == 0) res = (Double) d1 > (Integer) d2;
                    if (type2 == 1) res = (Double) d1 > (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 2) {
                    if (type2 == 2) throwTypeError(type1, type2);
                }
                if (type1 == 3) {
                    if (type2 == 0) throwTypeError(type1, type2);
                    if (type2 == 1) throwTypeError(type1, type2);
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                return res;
            case "<=":
                res = null;
                if (type1 == 0) {
                    if (type2 == 0) res = (Integer) d1 <= (Integer) d2;
                    if (type2 == 1) res = (Integer) d1 <= (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 1) {
                    if (type2 == 0) res = (Double) d1 <= (Integer) d2;
                    if (type2 == 1) res = (Double) d1 <= (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 2) {
                    if (type2 == 2) throwTypeError(type1, type2);
                }
                if (type1 == 3) {
                    if (type2 == 0) res = ((Boolean) d1 == true ? 1 : 0) <= (Integer) d2;
                    if (type2 == 1) res = ((Boolean) d1 == true ? 1 : 0) <= (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                return res;
            case ">=":
                res = null;
                if (type1 == 0) {
                    if (type2 == 0) res = (Integer) d1 >= (Integer) d2;
                    if (type2 == 1) res = (Integer) d1 >= (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 1) {
                    if (type2 == 0) res = (Double) d1 >= (Integer) d2;
                    if (type2 == 1) res = (Double) d1 >= (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 2) {
                    if (type2 == 2) throwTypeError(type1, type2);
                }
                if (type1 == 3) {
                    if (type2 == 0) res = ((Boolean) d1 == true ? 1 : 0) >= (Integer) d2;
                    if (type2 == 1) res = ((Boolean) d1 == true ? 1 : 0) >= (Double) d2;
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                return res;
            case "==":
                res = null;
                if (type1 == 0) {
                    if (type2 == 0) res = (Integer) d1 == (Integer) d2;
                    if (type2 == 1) throwTypeError(type1, type2);
                    if (type2 == 2) throwTypeError(type1, type2);
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 1) {
                    if (type2 == 0) res = ((Double) d1).equals((Integer) d2);
                    if (type2 == 1) throwTypeError(type1, type2);
                    if (type2 == 2) throwTypeError(type1, type2);
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 2) {
                    if (type2 == 0) throwTypeError(type1, type2);
                    if (type2 == 1) throwTypeError(type1, type2);
                    if (type2 == 2) res = Objects.equals((String) d1, (String) d2);
                    if (type2 == 3) throwTypeError(type1, type2);
                }
                if (type1 == 3) {
                    if (type2 == 0) throwTypeError(type1, type2);
                    if (type2 == 1) throwTypeError(type1, type2);
                    if (type2 == 2) throwTypeError(type1, type2);
                    if (type2 == 3) res = ((Boolean) d1 == true ? 1 : 0) == ((Boolean) d2 == true ? 1 : 0);
                }
                return res;
            case "!=":
                res = null;
                if (type1 == 0) {
                    if (type2 == 0) res = (Integer) d1 != (Integer) d2;
                    if (type2 == 1) res = !((Integer) d1).equals((Double) d2);
                    if (type2 == 2) throwTypeError(type1,type2);
                    if (type2 == 3) throwTypeError(type1,type2);
                }
                if (type1 == 1) {
                    if (type2 == 0) res = !((Double) d1).equals((Integer) d2);
                    if (type2 == 1) res = (Double) d1 != (Double) d2;
                    if (type2 == 2) throwTypeError(type1,type2);
                    if (type2 == 3) throwTypeError(type1,type2);
                }
                if (type1 == 2) {
                    if (type2 == 0) throwTypeError(type1,type2);
                    if (type2 == 1) throwTypeError(type1,type2);
                    if (type2 == 2) res = !Objects.equals((String) d1, (String) d2);
                    if (type2 == 3) throwTypeError(type1,type2);
                }
                if (type1 == 3) {
                    if (type2 == 0) throwTypeError(type1,type2);
                    if (type2 == 1) throwTypeError(type1,type2);
                    if (type2 == 2) throwTypeError(type1,type2);
                    if (type2 == 3) res = ((Boolean) d1 == true ? 1 : 0) != ((Boolean) d2 == true ? 1 : 0);
                }
                return res;

            case "&&":
                res = null;
                if(type1 != 3 || type2 != 3 )
                    throwTypeError(type1,type2);
                boolean bo1 = SemanticHelper.getSolve(d1);
                boolean bo2 = SemanticHelper.getSolve(d2);
                res = bo1 && bo2;
                return res;
            case "||":
                res = null;
                if(type1 != 3 || type2 != 3 )
                    throwTypeError(type1,type2);
                bo1 = SemanticHelper.getSolve(d1);
                bo2 = SemanticHelper.getSolve(d2);
                res = bo1 || bo2;
                return res;
        }

        return null;
    }

}
/* JavaCC - OriginalChecksum=6c2c64887700937cc6f33ba56c3fd7fc (do not edit this line) */
