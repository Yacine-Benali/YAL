/* Generated By:JJTree: Do not edit this line. ASTLiteralExpression.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package main.jjtree;

public
class ASTLiteralExpression extends ASTExpression {
  private Object value;

  public void setValue(Object value)
  {
    String str = (String) value;
    if (str.equalsIgnoreCase("true") || str.equalsIgnoreCase("false")) {
       this.value = Boolean.parseBoolean(str);
       return;
    }

    // Try to parse it as an integer
    try {
      this.value= Integer.parseInt(str);
      return;
    } catch (NumberFormatException e) {
      // Not an integer
    }

    // Try to parse it as a double
    try {
      this.value= Double.parseDouble(str);
      return;
    } catch (NumberFormatException e) {
      // Not a double
    }

    this.value = str;

  }

  public Object getValue() {
    return value;
  }


  public ASTLiteralExpression(int id) {
    super(id);
  }

  public ASTLiteralExpression(MyGrammar p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(MyGrammarVisitor visitor, Object data) {
    return value;
  }
}
/* JavaCC - OriginalChecksum=399f4d36f20ed9c6768df46c70c5d689 (do not edit this line) */
