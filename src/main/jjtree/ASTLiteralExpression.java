/* Generated By:JJTree: Do not edit this line. ASTLiteralExpression.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package main.jjtree;

public
class ASTLiteralExpression extends ASTExpression {
    private Object value;

    public void setValue(Object value) {
        String str = (String) value;
        if (str.equalsIgnoreCase("true") || str.equalsIgnoreCase("false")) {
            this.value = Boolean.parseBoolean(str);
            return;
        }

        // Try to parse it as an integer
        try {
            this.value = Integer.parseInt(str);
            return;
        } catch (NumberFormatException e) {
            // Not an integer
        }

        // Try to parse it as a double
        try {
            this.value = Double.parseDouble(str);
            return;
        } catch (NumberFormatException e) {
            // Not a double
        }
        // it's a string remove the queotes
        this.value = str.substring(1, str.length() - 1);

    }

    public Object getValue() {
        return value;
    }


    public ASTLiteralExpression(int id) {
        super(id);
    }

    public ASTLiteralExpression(MyGrammar p, int id) {
        super(p, id);
    }


    /**
     * Accept the visitor.
     **/
    public Object jjtAccept(MyGrammarVisitor visitor, Object data) {
        return value;
    }

    @Override
    public String toString() {
        return "ASTLiteralExpression{" +
                "value=" + value +
                '}';
    }
}
/* JavaCC - OriginalChecksum=14f34e60fb78514d47757c5e29ca7d72 (do not edit this line) */
