options {
    STATIC = false;
    VISITOR=true;
    MULTI = true;
    JJTREE_OUTPUT_DIRECTORY = "./src/main/jjtree";
    NODE_PACKAGE="main.jjtree";
    TRACK_TOKENS = true;
    //DEBUG_PARSER = true;
}

PARSER_BEGIN(MyGrammar)
package main.jjtree;
import java.io.FileReader;
import main.*;



public class MyGrammar {



    public static void main(String args[]) {
        // ANSI escape code for red text
        final String RED = "\u001B[31m";
        // ANSI escape code to reset the text color
        final String RESET = "\u001B[0m";

        if (args.length != 1) {
            System.out.println("Usage: java MyGrammar <filename>");
            return;
        }

        String filename = args[0];
        try {
            FileReader fileReader = new FileReader(filename);
            MyGrammar parser = new MyGrammar(fileReader);
            parser.enable_tracing();
            SimpleNode rootNode = parser.Start();

            DotGenerator generator = new DotGenerator(filename);
            generator.generateDot(rootNode);
            generator.getDotGraph();

            SemanticAnalysisVisitor visitor = new SemanticAnalysisVisitor();
            rootNode.jjtAccept(visitor, null); // Starts the visiting process*/

        } catch (TokenMgrError e) {
            System.out.println(RED+"Lexical Error: \n" + e.getMessage()+RESET);
        } catch (ParseException e) {
            System.out.println(RED+"Syntax Error: \n" + e.getMessage()+RESET);
        } catch ( Throwable t) {
            System.err.println(RED+t.getMessage()+RESET);
            //t.printStackTrace();
        }
    }
}






PARSER_END(MyGrammar)

SKIP : {
    " " | "\t" | "\n" | "\r" | "' '"| "''"
      | <SINGLECOM: < SINGLE_LINE_COMMENT >>
      | <MULTCOM: < MULTI_LINE_COMMENT >>
}
TOKEN : // Comments
/**
* comments
*/
{
      < SINGLE_LINE_COMMENT : "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")? >
    | < MULTI_LINE_COMMENT : "/*" (~["*"] | "*" ~["/"])* "*" "/" >
}
TOKEN : {
    < #MINLETTER : ["a"-"z"]>
|   < #CAPLETTER : ["A"-"Z"] >
|   < #DIGIT : ["0"-"9"] >
|   < INT : (<DIGIT>)+ >
|   < REAL : <INT> "." <INT> >
|    < BOOL : "true" | "false">
//|   < NUMBER : (<DIGIT>)+ |  (<DIGIT>)+ "." (<DIGIT>)+ >
}
TOKEN : { /* TYPES */
    < INT_KEYWORD : "int" >
|   < REAL_KEYWORD : "real" >
|   < STRING_KEYWORD : "string" >
|   < BOOL_KEYWORD : "bool" >
//|   < NUMBER_KEYWORD : "number" >
}
TOKEN : { /* KEYWORDS */
    < PROGRAM : "program" >
|   < FUNCTION : "function" >
|   < PROCEDURE : "procedure" >
|   < VAR : "var" >
|   < BEGIN : "begin" >
|   < END : "end" >
|   < WHILE : "while" >
|   < BREAK : "break">
|   < DO : "do" >
|   < IF : "if" >
|   < THEN : "then" >
|   < ELSE : "else" >
|   < RESULT:"Result">
// add a seprate section for built-in function when you have more then one
|   < PRINT : "print" >
|   < READINT : "readInt" >
|   < READSTRING : "readString" >
}
TOKEN : { /* operators*/
    < NOT : "!" >
|   < OR : "||" >
|   < AND : "&&" >
|   < PLUS : "+" >
|   < MINUS : "-" >
|   < MULTIPLY : "*" >
|   < DIVIDE : "/" >
|   < LESS : "<" >
|   < GREATER : ">" >
|   < LESSEQUAL : "<=" >
|   < GREATEREQUAL : ">=" >
|   < EQUAL : "==" >
|   < NOTEQUAL : "!=" >
}
TOKEN : {/* chars */
    < ASSIGN : ":=" >
|   < LPAREN : "(" >
|   < RPAREN : ")" >
|   < COMMA : "," >
|   < COLON : ":">
|   < SEMICOLON : ";" >
}

TOKEN : { /* others */
// identifier is last else it will also match the above strings
   < IDENTIFIER :
        <MINLETTER> (<MINLETTER> | <CAPLETTER>| <DIGIT>)*
   >

|  < PROGRAMIDENTIFIER :
        (<MINLETTER> | <CAPLETTER>) (<MINLETTER> | <CAPLETTER>| <DIGIT>)*
   >
|
    < STRING: "\"" ( ~["\"","\\"] | "\\" ( ["n","t","b","r","f","\\","\"","'"] | ["0"-"7"] ( ["0"-"7"] )? ) )* "\"" >



}


// High-level structure
SimpleNode Start() #Start :
{}
{
    programHeading() (functionDeclaration())* (procedureDeclaration())* block()
     { return jjtThis; }
}

void programHeading() :
{}
{
    <PROGRAM> (identifier() |<PROGRAMIDENTIFIER>)
}

// Function-related rules
void functionDeclaration() :
{}
{
    functionHeading() functionBody()
}

void functionHeading() #functionHeading :
{Token functionName,returnType;}
{
    <FUNCTION> functionName=identifier() [formalParameterList()] <COLON> returnType=typeIdentifier()
    {
    jjtThis.name = functionName.image;
    jjtThis.setReturnType(returnType.image);
}
}

void functionBody() :
{}
{
    block()
}

void formalParameterList()  :
{}
{
    <LPAREN> [formalParameterSection()] (<COMMA> formalParameterSection())* <RPAREN>
}

void formalParameterSection() :
{Token paramName, paramType;}
{
    paramName=identifier() <COLON> paramType=typeIdentifier()

    {
        jjtThis.setParamType( paramType.image);
        jjtThis.paramName = paramName.image;
    }
}

// Procedure-related rules
void procedureDeclaration() :
{}
{
    procedureHeading() procedureBody()
}

void procedureHeading() :
{Token name;}
{
    <PROCEDURE> name=identifier() [formalParameterList()]
    {jjtThis.name = name.image;}
}

void procedureBody() :
{}
{
    block()
}

// Block and statements
void block() :
{}
{
    [variableDeclarationPart()] statementPart()
}

void variableDeclarationPart() :
{}
{
    <VAR> variableDeclaration() <SEMICOLON> ( variableDeclaration() <SEMICOLON>)*
}

void variableDeclaration() :
{Token varName,varType; }
{
    varName=identifier() <COLON> varType=typeIdentifier()
    {jjtThis.name= varName.image; jjtThis.type=varType.image;}
}

void statementPart() :
{}
{
    <BEGIN> [statementSequence()] <END>
}

void statementSequence() :
{}
{
    statement() ( statement() )*
}

void statement() :
{}
{
    simpleStatement() | structuredStatement()
}

void simpleStatement() :
{}
{
    /*
        parser cant tell the diff between assignment and procedureCall
        because they both start with Identifier
    */
    break2() <SEMICOLON>|
    printCall() <SEMICOLON>|
    LOOKAHEAD(2) assignmentStatement() <SEMICOLON> |
    procedureCall() <SEMICOLON>
}
void break2():{}
{
    <BREAK>
}

void printCall():{}
{
    <PRINT> <LPAREN> Expression() <RPAREN>
}

void assignmentStatement() : {String variableName; }
{
   variableName=variableIdentifier() <ASSIGN>(
   LOOKAHEAD(3) builtInCalls()
   |
   LOOKAHEAD(2) functionCall()
   |
   // expressions covers variable id & string & number but no function calls
   Expression())

   {jjtThis.variableName = variableName;}
}
void builtInCalls(): {}
{
    ReadIntCall() | ReadStringCall()
}
void ReadIntCall():{}
{
    <READINT> <LPAREN> <RPAREN>
}

void ReadStringCall():{}
{
    <READSTRING> <LPAREN> <RPAREN>
}
void procedureCall() :{Token id;}
{
    id=identifier() actualParameterList()
   {jjtThis.name = id.image;}
}

void structuredStatement() :
{}
{
    whileStatement()
    |
    ifStatement()
}

void whileStatement() :
{}
{
    <WHILE> Expression() <DO> statementPart()
}

void ifStatement() :
{}
{
    <IF> Expression() <THEN> statementPart() [ <ELSE> statementPart() ]
}
// Helper methods for identifiers and types
void identifierList() :
{}
{
    identifier() (<COMMA> identifier())*
}

Token typeIdentifier() :
{ Token t = null; }
{
    (t = <INT_KEYWORD> { return t; }) |
   (t = <REAL_KEYWORD> { return t; }) |
   (t = <STRING_KEYWORD> { return t; }) |
   (t = <BOOL_KEYWORD> { return t; } )

}

Token identifier() :
{Token t ;}
{
    t = <IDENTIFIER> { return t;}
}

String variableIdentifier() :
{Token t;}
{
      t=identifier() {return t.image;}
    | t=<RESULT> {return t.image;}
}



void Expression() :
{ Token t;}
{
    AndExpression() (t=<OR> AndExpression(){jjtThis.operator = t.image;})*


}

void AndExpression():
{Token t;}
{
  EqualityExpression() ( t=<AND> EqualityExpression(){jjtThis.operator = t.image;})*
}



void EqualityExpression() :
{Token t;}
{
  RelationalExpression() (( t=<EQUAL> |  t=<NOTEQUAL> ) RelationalExpression() {jjtThis.operator = t.image;})*

}

void RelationalExpression():
{Token t;}
{
  AdditiveExpression()
  (
    (
       t=<LESS>
    |  t=<GREATER>
    |  t=<LESSEQUAL>
    |  t=<GREATEREQUAL>
    )
    AdditiveExpression()
    {jjtThis.operator = t.image;}
  )*
}



void AdditiveExpression() :
{Token t;}
{
  MultiplicativeExpression()
  (
  ( t=<PLUS> |  t=<MINUS>)
  (LOOKAHEAD(2) AdditiveExpression() | LOOKAHEAD(2) MultiplicativeExpression() )
  {jjtThis.operator = t.image;}
  )*

}

void MultiplicativeExpression() :
{Token t;}
{
  UnaryExpression() (
  ( t=<MULTIPLY> |  t=<DIVIDE> )
  (LOOKAHEAD(2) MultiplicativeExpression() | LOOKAHEAD(2) UnaryExpression())
  {jjtThis.operator = t.image;}
  )*

}


void UnaryExpression() :
{Token t = null;}
{
  (  t=<NOT>  UnaryExpression()
  | t=<MINUS> UnaryExpression()
  | N())
  {
    if (t == null)
        jjtThis.isUnary = true;
    else
        jjtThis.operator = t.image;
        jjtThis.isUnary = true;

  }

}

void N() :
{String varName;}
{
  LiteralExpression()
  |
  <LPAREN>  Expression() < RPAREN>
  |
  varName=variableIdentifier() {jjtThis.isVariable = true;jjtThis.variableName=varName;}


}

void LiteralExpression() :
{Token e;}
{
    e=<INT>   {jjtThis.setValue(e.image); }
    |
    e=<REAL> {jjtThis.setValue(e.image); }
    |
    e=<STRING> {jjtThis.setValue(e.image); }
    |
    e=<BOOL> {jjtThis.setValue(e.image); }


}

// Function Calls
void functionCall() :
{Token id;}
{
    id=identifier() actualParameterList()
   {jjtThis.name = id.image;}
}

void actualParameterList() :
{}
{
    <LPAREN> [actualParameter() (<COMMA> actualParameter())* ] <RPAREN>
}

void actualParameter() : {}
{
   Expression()

}

